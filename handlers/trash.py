from config import dp
from aiogram import types
from classes.init_class import sec, ud, vk, us
from text import list_text


@dp.message_handler()
async def trash(message: types.Message):
    us_id = message.from_user.id
    entry = ud.check_id(us_id)

    if entry:
        flag = vk.check_flag(us_id)
        match flag[1]:
            case 1: # –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
                match flag[2]:
                    case 1: 
                        res = sec.verifi_date(message.text)
                        if res:
                            vk.fill(us_id, 0, res[0])
                            vk.change_support_flag(us_id, 2)
                            await message.answer("–í–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
                        else:
                            await message.answer('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏:')
                    case 2:
                        if not ' ‚Üí  ' in message.text:
                            vk.fill(us_id, 1, message.text)
                            vk.change_support_flag(us_id, 0)
                            vk.change_head_flag(us_id, 0)
                            us.app_str(us_id)
                            vk.kick_tmp_data(us_id)
                            await message.answer(' üëå ')
                        else:
                            await message.answer('–ó–∞—Å—É–Ω—å —Å–≤–æ–π " ‚Üí  " —Å–∞–º –∑–Ω–∞–µ—à—å –∫—É–¥–∞! ')
            case 2: # –ø–æ–∏—Å–∫

                result = ud.search(us_id, message.text, flag=True)
                if result:
                    await message.answer(result)
                    ud.kick_data(us_id)
                    vk.change_head_flag(us_id, 0)
                else:
                    await message.answer('–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.\n\n/back ‚Äì –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:')
                    

            case 3: # —É–¥–∞–ª–µ–Ω–∏–µ

                    len_list = ud.return_len(us_id)

                    if message.text.strip().isdigit():

                        if -1 < int(message.text.strip()) < len_list:

                            ud.del_event(us_id, int(message.text.strip()))
                            ud.overwrite_data(us_id)
                            vk.change_head_flag(us_id, 0)
                            ud.kick_data(us_id)
                            await message.answer(' üëå ')
                        else:
                            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π ID.\n\n/back ‚Äì –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ\n/search ‚Äì –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:')
                    else:
                        await message.answer('ERROR!\n\n/back ‚Äì –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ\n/search ‚Äì –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:')

                   
            case _:
                await message.answer(list_text, parse_mode="HTML")
    else:
        await message.answer('–¢–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.')